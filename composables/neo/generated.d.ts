/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/me': {
    /** Get current user's basic info */
    get: operations['users_api_me']
  }
  '/api/catalog/search': {
    /**
     * Search items in catalog
     * @description Search items in catalog
     *
     * count and pages are estimated, the actual data may be less
     *
     * unlike the web search, this does not show external results,
     * nor does it parse a url to fetch an item. to do that, use /catalog/fetch.
     */
    get: operations['catalog_api_search_item']
    /**
     * This method is deprecated, will be removed by Aug 1 2023; use GET instead
     * @deprecated
     */
    post: operations['catalog_api_search_item_legacy']
  }
  '/api/catalog/fetch': {
    /**
     * Fetch item from URL of a supported site
     * @description Convert a URL from a supported site (e.g. https://m.imdb.com/title/tt2852400/) to an item.
     *
     * If the item is not available in the catalog, HTTP 202 will be returned.
     * Wait 10 seconds or longer, call with same input again, it may return the actual fetched item.
     * Some site may take ~90 seconds to fetch.
     */
    get: operations['catalog_api_fetch_item']
    /**
     * This method is deprecated, will be removed by Aug 1 2023; use GET instead
     * @deprecated
     */
    post: operations['catalog_api_fetch_item_legacy']
  }
  '/api/book/{uuid}': {
    /** Get Book */
    get: operations['catalog_api_get_book']
  }
  '/api/movie/{uuid}': {
    /** Get Movie */
    get: operations['catalog_api_get_movie']
  }
  '/api/tv/{uuid}': {
    /** Get Tv Show */
    get: operations['catalog_api_get_tv_show']
  }
  '/api/tv/season/{uuid}': {
    /** Get Tv Season */
    get: operations['catalog_api_get_tv_season']
  }
  '/api/tv/episode/{uuid}': {
    /** Get Tv Episode */
    get: operations['catalog_api_get_tv_episode']
  }
  '/api/podcast/{uuid}': {
    /** Get Podcast */
    get: operations['catalog_api_get_podcast']
  }
  '/api/album/{uuid}': {
    /** Get Album */
    get: operations['catalog_api_get_album']
  }
  '/api/game/{uuid}': {
    /** Get Game */
    get: operations['catalog_api_get_game']
  }
  '/api/performance/{uuid}': {
    /** Get Performance */
    get: operations['catalog_api_get_performance']
  }
  '/api/performance/production/{uuid}': {
    /** Get Performance Production */
    get: operations['catalog_api_get_performance_production']
  }
  '/api/movie/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_movie_legacy']
  }
  '/api/tv/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_tv_show_legacy']
  }
  '/api/tvseason/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_tv_season_legacy']
  }
  '/api/podcast/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_podcast_legacy']
  }
  '/api/album/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_album_legacy']
  }
  '/api/game/{uuid}/': {
    /**
     * This method is deprecated, will be removed by Aug 1 2023
     * @deprecated
     */
    get: operations['catalog_api_get_game_legacy']
  }
  '/api/me/shelf/{type}': {
    /**
     * List Marks On Shelf
     * @description Get holding marks on current user's shelf
     *
     * Shelf's `type` should be one of `wishlist` / `progress` / `complete`;
     * `category` is optional, marks for all categories will be returned if not specified.
     */
    get: operations['journal_api_list_marks_on_shelf']
  }
  '/api/me/shelf/item/{item_uuid}': {
    /**
     * Get Mark By Item
     * @description Get holding mark on current user's shelf by item uuid
     */
    get: operations['journal_api_get_mark_by_item']
    /**
     * Mark Item
     * @description Create or update a holding mark about an item for current user.
     *
     * `shelf_type` and `visibility` are required; `created_time` is optional, default to now.
     * if the item is already marked, this will update the mark.
     *
     * updating mark without `rating_grade`, `comment_text` or `tags` field will clear them.
     */
    post: operations['journal_api_mark_item']
    /**
     * Delete Mark
     * @description Remove a holding mark about an item for current user.
     */
    delete: operations['journal_api_delete_mark']
  }
  '/api/me/review/': {
    /**
     * List Reviews
     * @description Get reviews by current user
     *
     * `category` is optional, reviews for all categories will be returned if not specified.
     */
    get: operations['journal_api_list_reviews']
  }
  '/api/me/review/item/{item_uuid}': {
    /**
     * Get Review By Item
     * @description Get review on current user's shelf by item uuid
     */
    get: operations['journal_api_get_review_by_item']
    /**
     * Review Item
     * @description Create or update a review about an item for current user.
     *
     * `title`, `body` (markdown formatted) and`visibility` are required;
     * `created_time` is optional, default to now.
     * if the item is already reviewed, this will update the review.
     */
    post: operations['journal_api_review_item']
    /**
     * Delete Review
     * @description Remove a review about an item for current user.
     */
    delete: operations['journal_api_delete_review']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** UserSchema */
    UserSchema: {
      /** Url */
      url: string
      /** External Acct */
      external_acct: string
      /** Display Name */
      display_name: string
      /** Avatar */
      avatar: string
    }
    /** Result */
    Result: {
      /** Message */
      message?: string
    }
    /**
     * ItemCategory
     * @description An enumeration.
     * @enum {string}
     */
    ItemCategory: 'book' | 'movie' | 'tv' | 'music' | 'game' | 'podcast' | 'fanfic' | 'performance' | 'exhibition' | 'collection'
    /** ExternalResourceSchema */
    ExternalResourceSchema: {
      /** Url */
      url: string
    }
    /** EditionSchema */
    EditionSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Subtitle */
      subtitle?: string
      /** Orig Title */
      orig_title?: string
      /** Author */
      author: string[]
      /** Translator */
      translator: string[]
      /** Language */
      language?: string
      /** Pub House */
      pub_house?: string
      /** Pub Year */
      pub_year?: number
      /** Pub Month */
      pub_month?: number
      /** Binding */
      binding?: string
      /** Price */
      price?: string
      /** Pages */
      pages?: string
      /** Series */
      series?: string
      /** Imprint */
      imprint?: string
      /** Isbn */
      isbn?: string
    }
    /** MovieSchema */
    MovieSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Orig Title */
      orig_title?: string
      /** Other Title */
      other_title: string[]
      /** Director */
      director: string[]
      /** Playwright */
      playwright: string[]
      /** Actor */
      actor: string[]
      /** Genre */
      genre: string[]
      /** Language */
      language: string[]
      /** Area */
      area: string[]
      /** Year */
      year?: number
      /** Site */
      site?: string
      /** Duration */
      duration?: string
      /** Imdb */
      imdb?: string
    }
    /** TVShowSchema */
    TVShowSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Season Count */
      season_count?: number
      /** Orig Title */
      orig_title?: string
      /** Other Title */
      other_title: string[]
      /** Director */
      director: string[]
      /** Playwright */
      playwright: string[]
      /** Actor */
      actor: string[]
      /** Genre */
      genre: string[]
      /** Language */
      language: string[]
      /** Area */
      area: string[]
      /** Year */
      year?: number
      /** Site */
      site?: string
      /** Episode Count */
      episode_count?: number
      /** Imdb */
      imdb?: string
    }
    /** TVSeasonSchema */
    TVSeasonSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Season Number */
      season_number?: number
      /** Orig Title */
      orig_title?: string
      /** Other Title */
      other_title: string[]
      /** Director */
      director: string[]
      /** Playwright */
      playwright: string[]
      /** Actor */
      actor: string[]
      /** Genre */
      genre: string[]
      /** Language */
      language: string[]
      /** Area */
      area: string[]
      /** Year */
      year?: number
      /** Site */
      site?: string
      /** Episode Count */
      episode_count?: number
      /** Episode Uuids */
      episode_uuids: string[]
    }
    /** AlbumSchema */
    AlbumSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Other Title */
      other_title: string[]
      /** Genre */
      genre: string[]
      /** Artist */
      artist: string[]
      /** Company */
      company: string[]
      /** Duration */
      duration?: number
      /**
       * Release Date
       * Format: date
       */
      release_date?: string
      /** Track List */
      track_list?: string
      /** Barcode */
      barcode?: string
    }
    /** PodcastSchema */
    PodcastSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Genre */
      genre: string[]
      /** Hosts */
      hosts: string[]
      /** Official Site */
      official_site?: string
    }
    /** GameSchema */
    GameSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Genre */
      genre: string[]
      /** Developer */
      developer: string[]
      /** Publisher */
      publisher: string[]
      /** Platform */
      platform: string[]
      /**
       * Release Date
       * Format: date
       */
      release_date?: string
      /** Official Site */
      official_site?: string
    }
    /** CrewMemberSchema */
    CrewMemberSchema: {
      /** Name */
      name: string
      /** Role */
      role?: string
    }
    /** PerformanceSchema */
    PerformanceSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Orig Title */
      orig_title?: string
      /** Other Title */
      other_title: string[]
      /** Genre */
      genre: string[]
      /** Language */
      language: string[]
      /** Opening Date */
      opening_date?: string
      /** Closing Date */
      closing_date?: string
      /** Director */
      director: string[]
      /** Playwright */
      playwright: string[]
      /** Orig Creator */
      orig_creator: string[]
      /** Composer */
      composer: string[]
      /** Choreographer */
      choreographer: string[]
      /** Performer */
      performer: string[]
      /** Actor */
      actor: components['schemas']['CrewMemberSchema'][]
      /** Crew */
      crew: components['schemas']['CrewMemberSchema'][]
      /** Official Site */
      official_site?: string
    }
    /** SearchResult */
    SearchResult: {
      /** Data */
      data: (components['schemas']['EditionSchema'] | components['schemas']['MovieSchema'] | components['schemas']['TVShowSchema'] | components['schemas']['TVSeasonSchema'] | components['schemas']['AlbumSchema'] | components['schemas']['PodcastSchema'] | components['schemas']['GameSchema'] | components['schemas']['PerformanceSchema'])[]
      /** Pages */
      pages: number
      /** Count */
      count: number
    }
    /** ItemSchema */
    ItemSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
    }
    /** RedirectedResult */
    RedirectedResult: {
      /** Message */
      message?: string
      /** Url */
      url: string
    }
    /** TVEpisodeSchema */
    TVEpisodeSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Episode Number */
      episode_number?: number
    }
    /** PerformanceProductionSchema */
    PerformanceProductionSchema: {
      /** Uuid */
      uuid: string
      /** Url */
      url: string
      /** Api Url */
      api_url: string
      category: components['schemas']['ItemCategory']
      /** Parent Uuid */
      parent_uuid?: string
      /** Display Title */
      display_title: string
      /** External Resources */
      external_resources?: components['schemas']['ExternalResourceSchema'][]
      /** Title */
      title: string
      /** Brief */
      brief: string
      /** Cover Image Url */
      cover_image_url?: string
      /** Rating */
      rating?: number
      /** Rating Count */
      rating_count?: number
      /** Orig Title */
      orig_title?: string
      /** Other Title */
      other_title: string[]
      /** Language */
      language: string[]
      /** Opening Date */
      opening_date?: string
      /** Closing Date */
      closing_date?: string
      /** Director */
      director: string[]
      /** Playwright */
      playwright: string[]
      /** Orig Creator */
      orig_creator: string[]
      /** Composer */
      composer: string[]
      /** Choreographer */
      choreographer: string[]
      /** Performer */
      performer: string[]
      /** Actor */
      actor: components['schemas']['CrewMemberSchema'][]
      /** Crew */
      crew: components['schemas']['CrewMemberSchema'][]
      /** Official Site */
      official_site?: string
    }
    /**
     * ShelfType
     * @description An enumeration.
     * @enum {string}
     */
    ShelfType: 'wishlist' | 'progress' | 'complete'
    /** MarkSchema */
    MarkSchema: {
      shelf_type: components['schemas']['ShelfType']
      /** Visibility */
      visibility: number
      item: components['schemas']['ItemSchema']
      /**
       * Created Time
       * Format: date-time
       */
      created_time: string
      /** Comment Text */
      comment_text?: string
      /** Rating Grade */
      rating_grade?: number
      /** Tags */
      tags: string[]
    }
    /** PagedMarkSchema */
    PagedMarkSchema: {
      /**
       * Data
       * @default []
       */
      data?: components['schemas']['MarkSchema'][]
      /** Pages */
      pages: number
      /** Count */
      count: number
    }
    /** MarkInSchema */
    MarkInSchema: {
      shelf_type: components['schemas']['ShelfType']
      /** Visibility */
      visibility: number
      /** Comment Text */
      comment_text?: string
      /** Rating Grade */
      rating_grade?: number
      /**
       * Tags
       * @default []
       */
      tags?: string[]
      /**
       * Created Time
       * Format: date-time
       */
      created_time?: string
      /**
       * Post To Fediverse
       * @default false
       */
      post_to_fediverse?: boolean
    }
    /** ReviewSchema */
    ReviewSchema: {
      /** Url */
      url: string
      /** Visibility */
      visibility: number
      item: components['schemas']['ItemSchema']
      /**
       * Created Time
       * Format: date-time
       */
      created_time: string
      /** Title */
      title: string
      /** Body */
      body: string
      /** Html Content */
      html_content: string
    }
    /** PagedReviewSchema */
    PagedReviewSchema: {
      /**
       * Data
       * @default []
       */
      data?: components['schemas']['ReviewSchema'][]
      /** Pages */
      pages: number
      /** Count */
      count: number
    }
    /** ReviewInSchema */
    ReviewInSchema: {
      /** Visibility */
      visibility: number
      /**
       * Created Time
       * Format: date-time
       */
      created_time?: string
      /** Title */
      title: string
      /** Body */
      body: string
      /**
       * Post To Fediverse
       * @default false
       */
      post_to_fediverse?: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {

  /** Get current user's basic info */
  users_api_me: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UserSchema']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Search items in catalog
   * @description Search items in catalog
   *
   * count and pages are estimated, the actual data may be less
   *
   * unlike the web search, this does not show external results,
   * nor does it parse a url to fetch an item. to do that, use /catalog/fetch.
   */
  catalog_api_search_item: {
    parameters: {
      query: {
        query: string
        /** @description An enumeration. */
        category?: 'book' | 'movie' | 'tv' | 'music' | 'game' | 'podcast' | 'performance'
        page?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['SearchResult']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023; use GET instead
   * @deprecated
   */
  catalog_api_search_item_legacy: {
    parameters: {
      query: {
        query: string
        /** @description An enumeration. */
        category?: 'book' | 'movie' | 'tv' | 'music' | 'game' | 'podcast' | 'performance'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['SearchResult']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Fetch item from URL of a supported site
   * @description Convert a URL from a supported site (e.g. https://m.imdb.com/title/tt2852400/) to an item.
   *
   * If the item is not available in the catalog, HTTP 202 will be returned.
   * Wait 10 seconds or longer, call with same input again, it may return the actual fetched item.
   * Some site may take ~90 seconds to fetch.
   */
  catalog_api_fetch_item: {
    parameters: {
      query: {
        url: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ItemSchema']
        }
      }
      /** @description Accepted */
      202: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023; use GET instead
   * @deprecated
   */
  catalog_api_fetch_item_legacy: {
    parameters: {
      query: {
        url: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ItemSchema']
        }
      }
      /** @description Accepted */
      202: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Book */
  catalog_api_get_book: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['EditionSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Movie */
  catalog_api_get_movie: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['MovieSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Tv Show */
  catalog_api_get_tv_show: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['TVShowSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Tv Season */
  catalog_api_get_tv_season: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['TVSeasonSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Tv Episode */
  catalog_api_get_tv_episode: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['TVEpisodeSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Podcast */
  catalog_api_get_podcast: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PodcastSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Album */
  catalog_api_get_album: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AlbumSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Game */
  catalog_api_get_game: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GameSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Performance */
  catalog_api_get_performance: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PerformanceSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /** Get Performance Production */
  catalog_api_get_performance_production: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PerformanceProductionSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_movie_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['MovieSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_tv_show_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['TVShowSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_tv_season_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['TVSeasonSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_podcast_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PodcastSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_album_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AlbumSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * This method is deprecated, will be removed by Aug 1 2023
   * @deprecated
   */
  catalog_api_get_game_legacy: {
    parameters: {
      path: {
        uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GameSchema']
        }
      }
      /** @description Found */
      302: {
        content: {
          'application/json': components['schemas']['RedirectedResult']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * List Marks On Shelf
   * @description Get holding marks on current user's shelf
   *
   * Shelf's `type` should be one of `wishlist` / `progress` / `complete`;
   * `category` is optional, marks for all categories will be returned if not specified.
   */
  journal_api_list_marks_on_shelf: {
    parameters: {
      query?: {
        /** @description An enumeration. */
        category?: 'book' | 'movie' | 'tv' | 'music' | 'game' | 'podcast' | 'performance'
        page?: number
      }
      path: {
        /** @description An enumeration. */
        type: 'wishlist' | 'progress' | 'complete'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagedMarkSchema']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Get Mark By Item
   * @description Get holding mark on current user's shelf by item uuid
   */
  journal_api_get_mark_by_item: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['MarkSchema']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Mark Item
   * @description Create or update a holding mark about an item for current user.
   *
   * `shelf_type` and `visibility` are required; `created_time` is optional, default to now.
   * if the item is already marked, this will update the mark.
   *
   * updating mark without `rating_grade`, `comment_text` or `tags` field will clear them.
   */
  journal_api_mark_item: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MarkInSchema']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Delete Mark
   * @description Remove a holding mark about an item for current user.
   */
  journal_api_delete_mark: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * List Reviews
   * @description Get reviews by current user
   *
   * `category` is optional, reviews for all categories will be returned if not specified.
   */
  journal_api_list_reviews: {
    parameters: {
      query?: {
        /** @description An enumeration. */
        category?: 'book' | 'movie' | 'tv' | 'music' | 'game' | 'podcast' | 'performance'
        page?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PagedReviewSchema']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Get Review By Item
   * @description Get review on current user's shelf by item uuid
   */
  journal_api_get_review_by_item: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ReviewSchema']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Review Item
   * @description Create or update a review about an item for current user.
   *
   * `title`, `body` (markdown formatted) and`visibility` are required;
   * `created_time` is optional, default to now.
   * if the item is already reviewed, this will update the review.
   */
  journal_api_review_item: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReviewInSchema']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
  /**
   * Delete Review
   * @description Remove a review about an item for current user.
   */
  journal_api_delete_review: {
    parameters: {
      path: {
        item_uuid: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Result']
        }
      }
    }
  }
}
